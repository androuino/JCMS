apply plugin: 'java'

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'junit:junit:4.13.1'
}

tasks.register('headers', Exec) {
	description 'Generates JNI .h header files'

	ext.distFile = file('src/jni/cpp/com_gmail_etordera_jcms_JCMS.h')
	inputs.file file('src/main/java/com/gmail/etordera/jcms/JCMS.java')
	outputs.file ext.distFile

	commandLine 'javah', '-J-Dfile.encoding=UTF-8', '-classpath', 'src/main/java', '-d', 'src/jni/cpp', 'com.gmail.etordera.jcms.JCMS'
}

tasks.register('jni', Exec) {
	description 'Compiles JNI shared object which will allow access to native libraries.'
	dependsOn headers

	def jdk_home = file(System.getProperty('java.home')).parentFile
	println "JDK Home: ${jdk_home}"

	ext.osArch = System.getProperty('os.arch')
	def libArch = '32'
	if (ext.osArch.contains('64')) {
		libArch = '64';
	}

	def osName = System.getProperty('os.name').toLowerCase()
	def libOs = ''
	def libPrefix = 'lib'
	def libSuffix = '.so'
	def compilerFlags = '-fPIC'
	def compilerInclude = '-I' + jdk_home + '/java-11-openjdk-amd64/include'
	def compilerInclude2 = ''
	if (osName.contains('linux')) {
		libOs = 'linux'
		compilerInclude2 = '-I' + jdk_home + '/java-11-openjdk-amd64/include/linux'
	} else if (osName.contains("windows")) {
		libOs = "windows";
		libPrefix = "libwin";
		libSuffix = ".dll";
		compilerFlags = '-Wl,--add-stdcall-alias'
		compilerInclude2 = '-I' + jdk_home + '/include/win32'
	} else if (osName.contains("mac") || osName.contains("darwin")) {
		libOs = "mac";
		libPrefix = 'libmac'
		libSuffix = '.dylib'
		compilerInclude = '-I' + jdk_home + '/Home/include'
		compilerInclude2 = '-I' + jdk_home + '/Home/include/darwin'
	}

	ext.libMainDir = 'src/main/resources/com/gmail/etordera/jcms/lib'
	def libDir = ext.libMainDir + '/' + libOs + libArch
	def libPath = libDir + '/' + libPrefix + 'jcms' + libSuffix

	inputs.dir 'src/jni/cpp'
	outputs.file file(libPath)

	doFirst {
		new File(libDir).mkdirs()
	}

	println "compilerInclude: ${compilerInclude}"
	println "compilerInclude2: ${compilerInclude2}"

	executable 'g++'
	args compilerFlags
	args '-shared'
	args '-o'
	args libPath
	args compilerInclude
	if (compilerInclude2 != '') {
		args compilerInclude2
	}
	args '-I/usr/include/lcms2' // Include path for lcms2
	args 'src/jni/cpp/jcms.cpp'
	args '-llcms2'
}

tasks.processResources.dependsOn jni

tasks.register('zipsrc', Zip) {
	from 'src/main/java'
	include '**/*.java'
	archiveFileName = 'src.zip'
	destinationDirectory = file('build')
}

clean {
	delete headers.distFile
	delete jni.libMainDir
}

test {
	// Set the java.library.path system property to the directory where the .so file is generated
	systemProperty 'java.library.path', file('src/main/resources/com/gmail/etordera/jcms/lib').absolutePath
}
